#!/usr/bin/env python3
"""
Test Docker compatibility cho pugo.vn integration
"""

import os
import sys
import subprocess

def test_docker_compatibility():
    """Test xem code c√≥ t∆∞∆°ng th√≠ch v·ªõi Docker kh√¥ng"""
    print("=== TEST DOCKER COMPATIBILITY ===")
    
    # Test 1: Ki·ªÉm tra Selenium c√≥ th·ªÉ import kh√¥ng
    print("1. Testing Selenium import...")
    try:
        from selenium import webdriver
        from selenium.webdriver.chrome.options import Options
        print("   ‚úÖ Selenium import th√†nh c√¥ng")
    except ImportError as e:
        print(f"   ‚ùå Selenium import th·∫•t b·∫°i: {e}")
        return False
    
    # Test 2: Ki·ªÉm tra Chrome c√≥ s·∫µn kh√¥ng
    print("2. Testing Chrome availability...")
    try:
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        
        # Th·ª≠ t·∫°o driver
        driver = webdriver.Chrome(options=chrome_options)
        driver.quit()
        print("   ‚úÖ Chrome driver ho·∫°t ƒë·ªông")
    except Exception as e:
        print(f"   ‚ùå Chrome driver l·ªói: {e}")
        return False
    
    # Test 3: Ki·ªÉm tra extractor c√≥ th·ªÉ kh·ªüi t·∫°o kh√¥ng
    print("3. Testing extractor initialization...")
    try:
        from py_extractors.extractor_pugo import ExtractorPugo
        extractor = ExtractorPugo()
        print("   ‚úÖ Extractor kh·ªüi t·∫°o th√†nh c√¥ng")
    except Exception as e:
        print(f"   ‚ùå Extractor kh·ªüi t·∫°o th·∫•t b·∫°i: {e}")
        return False
    
    # Test 4: Ki·ªÉm tra can_handle method
    print("4. Testing can_handle method...")
    try:
        test_urls = [
            "https://detail.1688.com/offer/948414629704.html",
            "https://item.taobao.com/item.htm?id=123",
            "https://detail.tmall.com/item.htm?id=123",
            "https://pugo.vn/item/123"
        ]
        
        for url in test_urls:
            if extractor.can_handle(url):
                print(f"   ‚úÖ Can handle: {url}")
            else:
                print(f"   ‚ùå Cannot handle: {url}")
    except Exception as e:
        print(f"   ‚ùå can_handle test th·∫•t b·∫°i: {e}")
        return False
    
    # Test 5: Ki·ªÉm tra Flask app c√≥ th·ªÉ import kh√¥ng
    print("5. Testing Flask app import...")
    try:
        from app import app
        print("   ‚úÖ Flask app import th√†nh c√¥ng")
    except Exception as e:
        print(f"   ‚ùå Flask app import th·∫•t b·∫°i: {e}")
        return False
    
    print("\n‚úÖ T·∫§T C·∫¢ TESTS PASSED - CODE T∆Ø∆†NG TH√çCH V·ªöI DOCKER")
    return True

def test_dockerfile_syntax():
    """Test Dockerfile syntax"""
    print("\n=== TEST DOCKERFILE SYNTAX ===")
    
    try:
        # Ki·ªÉm tra Dockerfile c√≥ t·ªìn t·∫°i kh√¥ng
        if not os.path.exists("Dockerfile"):
            print("   ‚ùå Dockerfile kh√¥ng t·ªìn t·∫°i")
            return False
        
        # Ki·ªÉm tra docker-compose.yml c√≥ t·ªìn t·∫°i kh√¥ng
        if not os.path.exists("docker-compose.yml"):
            print("   ‚ùå docker-compose.yml kh√¥ng t·ªìn t·∫°i")
            return False
        
        print("   ‚úÖ Dockerfile v√† docker-compose.yml t·ªìn t·∫°i")
        
        # Ki·ªÉm tra requirements.txt
        if not os.path.exists("requirements.txt"):
            print("   ‚ùå requirements.txt kh√¥ng t·ªìn t·∫°i")
            return False
        
        print("   ‚úÖ requirements.txt t·ªìn t·∫°i")
        
        # Ki·ªÉm tra selenium trong requirements.txt
        with open("requirements.txt", "r") as f:
            content = f.read()
            if "selenium" in content:
                print("   ‚úÖ Selenium c√≥ trong requirements.txt")
            else:
                print("   ‚ùå Selenium kh√¥ng c√≥ trong requirements.txt")
                return False
        
        print("   ‚úÖ Dockerfile syntax OK")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Dockerfile test th·∫•t b·∫°i: {e}")
        return False

if __name__ == "__main__":
    print("Testing Docker compatibility for pugo.vn integration...\n")
    
    # Test code compatibility
    code_ok = test_docker_compatibility()
    
    # Test Dockerfile syntax
    dockerfile_ok = test_dockerfile_syntax()
    
    if code_ok and dockerfile_ok:
        print("\nüéâ T·∫§T C·∫¢ TESTS PASSED!")
        print("Code s·∫µn s√†ng ƒë·ªÉ build Docker image")
        print("\nƒê·ªÉ build v√† ch·∫°y:")
        print("1. docker build -t order-management-crawler .")
        print("2. docker-compose up -d")
    else:
        print("\n‚ùå C√ì L·ªñI C·∫¶N S·ª¨A TR∆Ø·ªöC KHI BUILD DOCKER")
        sys.exit(1)
